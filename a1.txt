from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes
from cryptography.fernet import Fernet

# using Fernet.generate_key() gives us generated fernet key
symmetricKey = Fernet.generate_key()
FernetInstance = Fernet(symmetricKey)

with open("/home/kali/a1/keys/public.key", "rb") as key_file:
  # store filedata  
  file_data = key_file.read()
  # seriliaziaton from pem  
  public_key = serialization.load_pem_public_key (
  # pass the file  
  file_data,
  # default 
  backend = default_backend()
)

encryptedSymmetricKey = public_key.encrypt(
 symmetricKey, padding.OAEP (
  mgf=padding.MGF1(algorithm=hashes.SHA256()),
  algorithm=hashes.SHA256(),
  label=None
 )
)

with open("encrypt/encryptedSymmertricKey.key", "wb") as key_file:
# key_file.write(encryptedSymmetricKey)
  filePath = "/home/kali/a1/encrypt/FileToEncrypt.txt"

with open(filePath, "rb") as file:
 file_data = file.read()
 encrypted_data = FernetInstance.encrypt(file_data)
 decrypted_data = FernetInstance.decrypt(encrypted_data)

# with open(filePath, "wb") as file:
#   file.write(encrypted_data)
quit()
